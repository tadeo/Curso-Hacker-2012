Laburamos sobre el archivo /students/irugoy/class_definition.py


Todas los métodos de una clase reciben como primer parametro la instacia. Por convencion ese le llama self

__init__ => constructor

los guiones bajos son conveción de python para decir que trata a esas funciones de manera especial. Son de funcionamiento internot

__str__ => respuesta string de la clase
__unicode__ => cadenas unidocde: para hacer una cadena unicode se usa 'u' delante de la variable: ejem:

  def __unicode(self):
    return u'Contains ' + u' '.join(self.contents);

=================

True y False son los booleanos y se escriben con mayúscula

=================

__del__ => se ejecuta cuando se muere el objeto , cuando el garbage collector lo borra (o funciona implisito: basket.__del__() o del(basket))

=================

del(instancia) ejecuta el método __del__ y lo mata implicitamente


basket.__str__() => funciona!

===============

Manejo de string: (trailing commas)

'Nombre de esta persona es ' + 'nombre'
'Nombre de esta persona es %s' % 'nombre'

'Nombre de esta persona es %s, %s' % ('apellido', 'nombre')

'Nombre de esta persona es %(lastname)s, %(name)s.' % {'name':'nombre','lastname':'apellido'}

===============
Recuerdo:
Las tuplas son inmutables (no se puede modificar en runtime)
===============

and y or

Operadores short circuit

En el caso del and:
Primero evalua el primer campo
	si da "falsy" devuelve ese primer valor  (NO el booleano sino el valor que evaluado con bool da false)
	si da 'truly" devuelve ese segundo valor (NO el booleano, sino el segundo valor)

El "or" funciona igual pero exclusivo y no inclusivo

print(variable and str(variable)) or 'no variable'

Si le da true variable (osea si existe) devuelve el valor segundo del and : "str(variable)"
Si no da true evalua el segundo del devuelve los segundo del or: "no variable"

La forma pythonic:

print(str(variable) if variable else 'no variable')


===============
funcion map

recibe una secuencia (iterable) y le ejecuta una funcion a cada uno de los items
map(str, lista);

===============
Para ejecutar un archivo .py por linea de comando

$ python class_definition.py

Para decirle al sistema (bash) que se debe ejecutar el archivo con python (sin llamar a python), se le deben dar permisos de ejecucion al archivo .py y configurarle quien debe procesar el archivo.

Para poner al archivo permisos de escritura (en linea de comando bash)

chown a+x class_definition.py

y en la primer linea de codigo debe especificar quien ejecuta. Por convencion de bash de unix

#!/usr/bin/env python

Una vez echo esto se puede hacer
./class_definition.py

===================
Modulos.
Es un archivo que debe estar accesible en el python_path

Hago un archivo class_execution.py donde voy a importar la clase bascket del class_definition.
Tengo tres formas de hacerlo.

import class_definition
basket4 = class_definition.Basket([1,2,3,4]);

El import generó el namespace "class_definition" y dentro de él esta el modulo importado. Basket es solo accesible dentro del namespace.

from class_definition import Basket
basket4 = class_definition.Basket([1,2,3,4]);

De esta forma ejecuta el archivo class_definition.py y agrega al namespace local (de este archivo) la clase Basket

from class_definition import *
basket4 = class_definition.Basket([1,2,3,4]);
print (basket1);

Esta importa todo lo que esta en el archivo class_definition.py, clases y variables.

La major práctica es importa implicitamente cada clase que se va a usar.
Se pueden importar varias clases de un solo archivo

from class_definition import Basket, BasketItem


O inclusive se puede renombrar la clase dentro del mi namespace
from class_definition import Basket as Canasta
basket4 = Canasta([1,2,3,4]);


Es importante tener en cuanta que los import pueden generar inclusiones circulares.

Para evitar esto se pretende minimizar la dependencia de los modulos.
Y poner los import dentro de la definición de una función.

=======================
Cada módulo tiene un __name__ que contasta el nombre del modulo que lo contextualiza. Cuando se ejecuta el modulo directamente el __name__ es __main__ (constructor inicial). En caso de importarse es el nombre del módulo.
El __main__ es quien ejecuta el programa.
Por lo tanto, para poder saber si un modulo esta ejecutandose o esta importandose se utiliza un if en el módulo

if __name__ == '__main__':
	#lineas ejecutables


Todas las clases y funciones tiene

__name__		=> nombre del contexto
__doc__			=> es la documentación de la clase (string sin asignar escrito entre tres comillas despues de la declaracion de la clase)
__module__		=> en que modulo se estan ejecutando
__class__		=> clase que creo el objeto

================
Paquete:

Es un conjunto de modulos.
Los paquetes deben tener un archivo que se llame __init__.py dentro de la carpeta.

Para importar de un paquete se debe hacer referencia al paqueta.modulo

from classtest.class_definition import Basket

=================

virtual env

================

modulos de python que se usan bastante

pip (el viejo se llama easy_install) => manejo de paquetes

virtualenv

bpython			=> consola mejorada

fabric 			=> automatizar scripts donde podes ejecutar cosas locales y remotas (ejemplo mas claro: crear branch, deploy)

pil				=> puython image library

beautifulsoup	=> a partir de un HTML puedo recorrerlo mediaten sintaxis json


=================

MVC = Model View Controller

Modelo: 		Datos y lógica de negocios
Vista: 			Visualización de datos, retorno de datos
Controlador: 	Recibir los datos de la interfase

==============
Django

utiliza patron MTV => Model Template View

Es basado en el mvc pero reparte distinto las tareas.
La vista hace mas acciones de controlador y el template hace exclusivamente render de textos.

Agrega un controlador de URLs, lugar donde se define la estructura de url, a que vista llama y que información lleva.

El request es recibido por el controlador de URL, define que vista va a atender y le pasa los parametros.
La vista le pide al modelo la información que necesita para armar la respuesta, genera un diccionario con esa información, el cual se los pasa al template correspondiente.
El html resultante se devuelve como http response.

Otros elementos importantes:

Forms 		=> para menejo de formularios
Admin		=> genera una aplicación de administración básica, customizable.
Users		=> gestion de autentificacion para usuarios con diponibilidad de profile

Settings	=> estan centralizados en un archivo

==============

Estructura de un proyecto base:

apps/ 		=> aplicaciones
urls.py 	=> maneja los patrones de las urls